<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.avaloq</groupId>
	<artifactId>avaloq-api</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Avaloq API</name>
	<description>Avaloq Assessment</description>
	<properties>
		<java.version>8</java.version>
		<docker-maven-plugin.version>1.0.0</docker-maven-plugin.version>
		<docker.image.name>api</docker.image.name>
		<docker.image.prefix>avaloq</docker.image.prefix>
		<docker.registry.host>host</docker.registry.host>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-rest-hal-explorer</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.20</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.hamcrest</groupId>
					<artifactId>hamcrest-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.5.2</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>avaloq-api</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- User liquibase plugin -->
            <plugin>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-maven-plugin</artifactId>
                <version>3.4.2</version>
                <configuration>
                    <propertyFile>db/liquibase.properties</propertyFile>
                    <changeLogFile>db/changelog/db.changelog-master.xml</changeLogFile>
                </configuration>
                <!--  I personally prefer run  it manually
                <executions>
                  <execution>
                    <phase>process-resources</phase>
                    <goals>
                      <goal>update</goal>
                    </goals>
                  </execution>
                </executions>
                -->
            </plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker-maven-plugin.version}</version>
				<configuration>
					<skipDocker>false</skipDocker>
					<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
					<resources>
						<resource>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.${project.packaging}</include>
							<targetPath>/</targetPath>
						</resource>
					</resources>
				</configuration>
				<executions>
					<execution>
						<id>build</id>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
							<imageName>${docker.image.prefix}/${docker.image.name}:${project.version}</imageName>
						</configuration>
					</execution>

					<execution>
						<id>tag</id>
						<goals>
							<goal>tag</goal>
						</goals>
						<configuration>
							<forceTags>true</forceTags>
							<image>${docker.image.prefix}/${docker.image.name}:${project.version}</image>
							<newName>${docker.registry.host}/${docker.image.prefix}/${docker.image.name}:${project.version}</newName>
						</configuration>
					</execution>

					<execution>
						<id>push</id>
						<goals>
							<goal>push</goal>
						</goals>
						<configuration>
							<imageName>${docker.registry.host}/${docker.image.prefix}/${docker.image.name}:${project.version}</imageName>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
